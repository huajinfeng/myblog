import{_ as a,p as e,q as n,Y as s}from"./framework-faa23c95.js";const i={},d=s(`<h2 id="常用dos命令" tabindex="-1"><a class="header-anchor" href="#常用dos命令" aria-hidden="true">#</a> 常用DOS命令</h2><p>cd进入指定目录 cd.. cd/ md创建文件夹目录 rd删除指定文件夹目录（文件夹目录必须是空的） dir所有文件夹目录 del删除指定文件 cls清屏</p><h2 id="jdk8与jdk17的安装" tabindex="-1"><a class="header-anchor" href="#jdk8与jdk17的安装" aria-hidden="true">#</a> jdk8与jdk17的安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ORACLE官网
https://developer.oracle.com/zh/
JDK17官网下载地址
https://www.oracle.com/cn/java/technologies/downloads/#jdk17-windows
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="起步-hello-world" tabindex="-1"><a class="header-anchor" href="#起步-hello-world" aria-hidden="true">#</a> 起步，Hello,World</h2><p>class：关键字，表示”类“，后面跟着类名 public static void main(String[] args)：main()方法的格式是固定的，表示程序的入口 每一行执行语句必须以 ; 结束</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">HelloChina</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//主方法</span>
        <span class="token comment">//从控制台输出数据的操作</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!!你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数据之后，会换行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!!你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数据之后，不会换行</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
缺少主方法报错：
错误<span class="token operator">:</span> 在类 <span class="token class-name">HelloChina</span> 中找不到 main 方法<span class="token punctuation">,</span> 请将 main 方法定义为<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>否则 <span class="token class-name">JavaFX</span> 应用程序类必须扩展<span class="token class-name"><span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span>Application</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过记事本编写时，有中文需要将编码修改为ANSI 命令行运行java</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//切换到文件所在盘
C:\\Users\\lenovo&gt;e:

//进入文件目录
E:\\javacode&gt;cd E:\\javacode

//通过javac编译java文件，编译时需要带文件类型，windows文件名不区分大小写
E:\\javacode&gt;javac 源文件名.java

//运行编译后的字节码文件，运行时不需要带文件类型
E:\\javacode&gt;E:\\javacode&gt;java 字节码文件名

编译后会生成1个或多个字节码文件，每个字节码文件的文件名对应一个Java的类 ，并且字节码名与类名相同。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释" aria-hidden="true">#</a> 文档注释</h2><p>文档注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
<span class="token keyword">@author</span> hjf
@version 1.0
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-D line-numbers-mode" data-ext="D"><pre class="language-D"><code>javadoc -d mydoc -author -version HelloWorld.java
mydoc为生成后所在目录名，随便起
-author -version文档注释信息
HelloWorld.java源文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java语言的优缺点" tabindex="-1"><a class="header-anchor" href="#java语言的优缺点" aria-hidden="true">#</a> java语言的优缺点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点：</h3><h5 id="_1-跨平台性" tabindex="-1"><a class="header-anchor" href="#_1-跨平台性" aria-hidden="true">#</a> 1.跨平台性</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>原理：只要在需要运行Java应用程序的操作系统上，先安装一个Java虚拟机（JVM）。由JVM来负责Java程序在该系统中的运行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-面向对象性" tabindex="-1"><a class="header-anchor" href="#_2-面向对象性" aria-hidden="true">#</a> 2.面向对象性</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>非常适合大型软件的设计和开发。面向对象编程支持封装、继承、多态等特性，让程序更好达到高内聚，低耦合的标准。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-健壮性" tabindex="-1"><a class="header-anchor" href="#_3-健壮性" aria-hidden="true">#</a> 3.健壮性</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了相对安全的内存管理和访问机制。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-安全性高" tabindex="-1"><a class="header-anchor" href="#_4-安全性高" aria-hidden="true">#</a> 4.安全性高</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Java适合于网络/分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：安全防范机制（ClassLoader类加载器），可以分配不同的命名空间以防代替本地的同名类、字节代码检查。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-简单性" tabindex="-1"><a class="header-anchor" href="#_5-简单性" aria-hidden="true">#</a> 5.简单性</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Java就是C++语法的简化版。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-高性能" tabindex="-1"><a class="header-anchor" href="#_6-高性能" aria-hidden="true">#</a> 6.高性能</h5><h5 id="_7-社区繁荣" tabindex="-1"><a class="header-anchor" href="#_7-社区繁荣" aria-hidden="true">#</a> 7.社区繁荣</h5><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h3><h5 id="_1-语法过于复杂、严谨" tabindex="-1"><a class="header-anchor" href="#_1-语法过于复杂、严谨" aria-hidden="true">#</a> 1.语法过于复杂、严谨</h5><h5 id="_2-一般适用于中大型网站开发-整个架构会比较重" tabindex="-1"><a class="header-anchor" href="#_2-一般适用于中大型网站开发-整个架构会比较重" aria-hidden="true">#</a> 2.一般适用于中大型网站开发，整个架构会比较重</h5><h5 id="_3-并非适用于所有领域" tabindex="-1"><a class="header-anchor" href="#_3-并非适用于所有领域" aria-hidden="true">#</a> 3.并非适用于所有领域</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Java在服务器端编程和跨平台客户端应用领域很有优势
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jvm功能说明-java虚拟机-内存溢出、内存泄漏" tabindex="-1"><a class="header-anchor" href="#jvm功能说明-java虚拟机-内存溢出、内存泄漏" aria-hidden="true">#</a> JVM功能说明（Java虚拟机）内存溢出、内存泄漏</h2><p>是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不用的存储区域，负责执行指令、管理数据、内存、寄存器。</p><h5 id="功能1-实现java程序的跨平台性" tabindex="-1"><a class="header-anchor" href="#功能1-实现java程序的跨平台性" aria-hidden="true">#</a> 功能1：实现Java程序的跨平台性</h5><h5 id="功能2-自动内存管理-内存分配、内存回收" tabindex="-1"><a class="header-anchor" href="#功能2-自动内存管理-内存分配、内存回收" aria-hidden="true">#</a> 功能2：自动内存管理（内存分配、内存回收）</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>设计到运算的数据的分配、存储都由JVM来完成
GC的自动回收，提高了内存空间的利用效率，很大程度上减少了因为没有释放空间而导致的内存泄漏
Java程序还是会出现内存溢出和内存泄漏的问题
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="换行符、制表符" tabindex="-1"><a class="header-anchor" href="#换行符、制表符" aria-hidden="true">#</a> 换行符、制表符</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\\n  换行符
\\t  制表符，一定长度的空格，一般为4个空格
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一个-java-源文件中是否可以包括多个类-有什么限制" tabindex="-1"><a class="header-anchor" href="#一个-java-源文件中是否可以包括多个类-有什么限制" aria-hidden="true">#</a> 一个&quot;.java&quot;源文件中是否可以包括多个类？有什么限制</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一个源文件中可以声明多个类，但是最多只能有一个类使用public进行声明，且要求声明为public的类名与源文件名相同。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41),t=[d];function l(c,r){return e(),n("div",null,t)}const u=a(i,[["render",l],["__file","1.Javagaishu.html.vue"]]);export{u as default};
